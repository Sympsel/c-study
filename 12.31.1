12.31


//// Created by Sympsl on 2024/12/28.
////

```c
//#include<stdio.h>
//int count_num_of_1(int n);
//int main()
//{
//    int a;
//    int n;
//    scanf("%d", &n);
//    a = count_num_of_1(n);
//    printf("%d\n", a);
//    return 0;
//}
//
//int count_num_of_1(int n)
////{
////    int k = 0;
////    for (int i = 0; i < 32; i++)
////    {
////
////        if ((n >> i) &1)//1011 0000
////            k++;
////
////    }
////    return k;
////}
//{
//    int k=0;
//    while(n)
//    {
//        n &= (n-1);
//        k++;
//    }
//    return k;
//}

//#include<stdio.h>
//int main()
//{
//    int n;
//    scanf("%d",&n);
//    getchar();
//    char ch[n];
//    for(int i=n-1;i>-1;i--)
//    {
//        scanf("%c",&ch[i]);
//
//    }
//    for(int i=0;i<n;i++)
//    {
//        printf("%c",ch[i]);
//    }
//
//    return 0;
//}

//#include<stdio.h>
//#define N 100000
//int main()
//{
//    int n;
//    int t;
//    char ch[N];
//    scanf("%d", &t);
//    while (t--)
//    {
//        scanf("%d", &n);
//        getchar();
//        for (int i = n - 1; i > -1; i--)
//        {
//            scanf("%c", &ch[i]);
//        }
//        for (int i = 0; i < n; i++)
//        {
//            printf("%c", ch[i]);
//        }
//        printf("\n");
//    }
//
//    return 0;
//}



//#include<stdio.h>
//int main()
//{
//    int n, m;
//    scanf("%d%d",&m,&n);
//    char ch[m][n];
//    for(int i=0;i<m;i++)
//    {
//        getchar();
//        for(int j=0;j<n;j++)
//        {
//            scanf("%c",&ch[i][j]);
//        }
//    }
//    for(int i=m-1;i>-1;i--)
//    {
//        for(int j=n-1;j>-1;j--)
//        {
//            printf("%c",ch[i][j]);
//        }
//        printf("\n");
//    }
//    return 0;
//}


//#include<stdio.h>
//#define N 100000
//int main()
//{
//    int t;
//    int n;
//    char ch[N];
//    scanf("%d",&t);
//    while(t--)
//    {
//        scanf("%d",&n);
//        getchar();
//        for(int i=0;i<n;i++)
//        {
//            scanf("%c",&ch[i]);
//        }
//        for(int i=n-1;i>-1;i--)
//        {
//            if(ch[i]!=' ')
//            {
//                printf("%c",ch[i]);
//            }
//        }
//        printf("\n");
//    }
//    return 0;
//}

//#include<stdio.h>
//int main()
//{
//    int n;
//    scanf("%d",&n);
//    int k=0;
//    for(int i=0;i<n;i++)
//    {
//        if((n>>i)&1)
//            k++;
//    }
//    if(k==1)
//    {
//        printf("%d is a power of 2\n",n);
//    }
//    return 0;
//}



//#include<stdio.h>
//int main()
//{
//    int m=0;
//    int n=0;
//    int k=0;
//    scanf("%d%d",&m,&n);
//    for(int i=0;i<32;i++)
//    {
//        if(((m>>i)&1)^((n>>i)&1))
//            k++;
//    }
//    printf("%d\n",k);
//    return 0;
//}

//#include<stdio.h>
//int main()
//{
//    int m;
//    int n;
//    scanf("%d%d",&m,&n);
//    int k=0;
//    int t=m^n;
////    for(int i=0;i<32;i++)
////    {
////        if((t>>i)&1)
////            k++;
////    }
//    while(t)
//    {
//        t&=(t-1);
//        k++;
//    }
//    printf("%d\n",k);
//    return 0;
//}

//#include<stdio.h>
//int search(int* nums, int numsLen, int target )
//{
//    int low=0,high=numsLen-1;
//    int mid=(low+high)/2;
//    loop:
//    if(target==nums[mid])
//    {
//        return mid;
//    }
//    else if(target!=nums[mid])
//    {
//        if(target>=nums[mid])
//        {
//            low=mid+1;
//            goto loop;
//        }
//        else if(target<nums[mid])
//        {
//            high=mid-1;
//            goto loop;
//        }
//
//        if(nums[low]==target)
//            return low;
//        else
//        return -1;
//    }
//    return mid;
//    // write code here
//}
//
//int main()
//{
//    int nums[]={1,2,3,4,5,6,7,8,9,10};
//    int numsLen=sizeof(nums)/sizeof(nums[0]);
//    int target=7;
//    int result=search(nums,numsLen,target);
//    printf("%d\n",result);
//    return 0;
//}


//#include<stdio.h>
//int main()
//{
//    int n;
//    scanf("%d",&n);
//    while(n!=0)
//    {
//        int t=n%10;
//        printf("%d",t);
//        n/=10;
//
//    }
//
//    return 0;
//}

//#include<stdio.h>
//
//
//long long int jiecheng(int n)
//{
//    long long int s=1;
//    for(int i=1;i<=n;i++)
//    {
//        s*=i;
//    }
//    return s;
//
//}
//int main()
//{
//
//    long long int n,m;
//    scanf("%lld%lld",&n,&m);
//    if(n>=m)
//    {
//
//        long long int x=jiecheng(n)/jiecheng(n-m);
//        printf("%lld",x);}
//    else {
//        printf("0");
//
//
//
//    }
//    return 0;
//}


//#include<stdio.h>
//#define N 10000
//void digit(int x,int i)
//{
//    int k=0;
//    int arr[N];
//    while(x!=3)
//    {
//        int t=x%10;
//        arr[k++]=t;
//        x/=10;
//    }
//    for(int j=k;j>-1;j--)
//    {
//        printf("%d",arr[j]);
//    }
//}
//
//int main()
//{
//    int x,i;
//    scanf("%d%d",&x,&i);
//    digit(x,i);
//
//    return 0;
//}

//#include<stdio.h>
//#define N 10000
//
//void digit(int x,int i)
//{
//    int arr[N];
//    int k=0;
//    while(i--)
//    {
//        arr[k++]=x%10;
//        x/=10;
//    }
//    for(int j=k-1;j>-1;j--)
//    {
//        printf("%d",arr[j]);
//    }
//}
//
//int main()
//{
//    int x,i;
//    scanf("%d%d",&x,&i);
//    digit(x,i);
//    return 0;
//}


//#include<stdio.h>
//
//
//int Ackmann(int m,int n)
//{
//    if(m==0)
//        return n+1;
//    else if(m>0&&n==0)
//        return Ackmann(m-1, 1);
//    else
//        return Ackmann(m-1, Ackmann(m, n-1));
//}
//
//int main()
//{
//    int n,m;
//    scanf("%d%d",&n,&m);
//    printf("%d",Ackmann(m,n));
//
//    return 0;
//}


//#include <stdio.h>
//
//
//int digui(int n)
//{
//    if(n==1)
//        return 1;
//    else
//        return digui(n-1)+digui(n-2);
//}
//int main()
//{
//    int n;
//    scanf("%d",&n);
//    printf("%d",digui(n));
//    return 0;
//}


//#include<stdio.h>
//int main()
//{
//    int t;
//    scanf("%d",&t);
//    while(t--)
//    {
//        int n;
//        scanf("%d",&n);
//        if(n==1)
//            printf("0 ");
//        else
//        {
//            int n1 = 0, n3 = 0;
//            while (n) {
//                n /= 2;
//                n3++;
//            }
//            for (int i = 0; i < n3; i++)
//                if ((n >> i) & 1)
//                    n1++;
//            int n2 = n3 - n1;
//            if ((n1 % 2 == 0) && (n2 % 2 == 0))
//                printf("%d ", 10);
//            else if (n1 % 2 == 0)
//                printf("1 ");
//            else if (n2 % 2 == 0)
//                printf("0 ");
//            else
//                printf("100 ");
//
//        }
//        printf("\b");
//    }
//    return 0;
//}


//#include <stdio.h>
//#include<math.h>
//int main()
//{
//    unsigned int a=0;
//    for(int i=1;i<=6;i++)
//        a+=(9+i)*pow(16,6-i);
//    printf("%u",a);
//    return 0;
//}
//


//#include<stdio.h>
//int main()
//{
//    char a=-128;
//    signed char b=-1;
//    unsigned char c=-1;
//    char d=128;
//    printf("a=%u,a=%d,b=%d,c=%d,d=%u\n",a,a,b,c,d);
////10000000 00000000 00000000 10000000
////11111111 11111111 11111111 01111111
////11111111 11111111 11111111 10000000
////10000000
////11111111 11111111 11111111 10000000
////4294967168
////10000000 00000000 00000000 10000000
////11111111 11111111 11111111 01111111
////10000000 00000000 00000000 10000000
//    return 0;
//}
//11111111 11111111 11111111 10000000

//#include<stdio.h>
//int main()
//{
//    int i=-20;
//    unsigned int j=10;
//    printf("%d\n",i+j);
//    printf("%u\n",i+j);
//    printf("%d\n",i-j);
//
//    return 0;
//}


//#include<stdio.h>
//#include<windows.h>
//int main()
//{
//    unsigned int i;
//    for(i=9;i>=0;i--)
//    {
//        printf("%u ",i);
//        Sleep(1000);
//    }
//    return 0;
//}

//#include<stdio.h>
//#include<string.h>
//int main()
//{
//    signed char arr[1000];
//    for(int i=0;i<1000;i++)
//    {
//        arr[i]=-1-i;
//    }
//    printf("%d",strlen(arr));
//
//    return 0;
//}
//


//#include<stdio.h>
//#include<windows.h>
//unsigned char i=0;
//int main()
//{
//    for(i=0;i<256;i++)
//    {
//        printf("hello world\t");
//        Sleep(1000);
//    }
//    return 0;
//}
